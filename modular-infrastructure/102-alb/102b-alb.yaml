---
# ---------------------------------------------------------------------------------------------------
# version  1.0
# Library: https://github.com/Frankie116/my-library.git
# Creates an Application Load Balancer
# ---------------------------------------------------------------------------------------------------

# req:
# 100-vpc.yaml

AWSTemplateFormatVersion: 2010-09-09
Description: This template creates an ALB.  The code is part of a standard modular infrastructure library.



Metadata:

  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "Export VPC Stack Name"
        Parameters:
          - ExportVpcStackName



Parameters:

  ExportVpcStackName:
    Description: The name of the vpc stack that exports values
    Type: String
    Default: vpc

  TargetGroupPort:
    Type: Number
    Default: 80

  ListenerPort:
    Type: Number
    Default: 80

  HealthCheckPath:
    Type: String
    Default: /

  Certificate:
    Type: String
    # Update with the certificate ARN from Certificate Manager, which must exist in the same region.
    Default: 'arn:aws:acm:region:123456789012:certificate/00000000-0000-0000-0000-000000000000'

Resources:

## ---------------------------------------------------------------------------------
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      VpcId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-VPC
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200,302
      Port:  !Ref TargetGroupPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      
      

## ---------------------------------------------------------------------------------
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ALB
      Port: !Ref ListenerPort
      Protocol: HTTP


# ---------------------------------------------------------------------------------
  ListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ALB
      Port: !Ref ListenerPort
      Protocol: HTTPS
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate

  
## ---------------------------------------------------------------------------------
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets: 
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet1
        - Fn::ImportValue: !Sub ${ExportVpcStackName}-PublicSubnet2


## ---------------------------------------------------------------------------------
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access on ports 80/443
      VpcId:
        Fn::ImportValue: !Sub ${ExportVpcStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB Security Group
      

## ---------------------------------------------------------------------------------
Outputs:

  TargetGroup:
    Description: Webserver target group
    Export:
      Name: !Sub ${AWS::StackName}-TargetGroup
    Value: !Ref TargetGroup

  ALBDnsName:
    Description: ALB DNS Name
    Export:
      Name: !Sub ${AWS::StackName}-ALBDnsName
    Value: !GetAtt ALB.DNSName

  ALBZoneID:
    Description: ALB Canonical Hosted Zone ID
    Export:
      Name: !Sub ${AWS::StackName}-ALBZoneID
    Value: !GetAtt ALB.CanonicalHostedZoneID

  ALBSecurityGroup:
    Description: Application Load Balancer Security Group ID
    Export:
      Name: !Sub ${AWS::StackName}-ALBSecurityGroup
    Value: !Ref ALBSecurityGroup