---
# ---------------------------------------------------------------------------------------------------
# File: app02-nestedroot-fargate.yaml
# Version: 3.0
# Library: https://github.com/Frankie116/my-library.git
# Summary: Creates a website hosted on AWS ECS Fargate using a docker image pulled from docker.io.
# This template builds the infrastructure using re-usable nested stacks. 
# Infrastructure created with this template include the following:
# ECS Fargate, Application Loadbalancer, Route53 DNS Zone & records, Auto Scaling Groups, Security Groups.
# An existing VPC is required. (default vpc minimum)
#
# Dependant stacks created from code located in s3:
# 303-listeners.yaml
# 302-alb.yaml
# 301-sg.ymal
# ---------------------------------------------------------------------------------------------------

AWSTemplateFormatVersion: 2010-09-09
Description: An example CloudFormation template for Fargate.

## ----------------------------------------------------------------------
Metadata:

  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: "Network"
        Parameters: 
          - EcsVpc
          - EcsSubnets
      - 
        Label: 
          default: "Security Group"
        Parameters: 
          - EcsListenerPort
          - EcsSourceIp1
          - EcsSourceIp2
      - 
        Label: 
          default: "Target Group"
        Parameters: 
          - EcsTargetPort
          - EcsTargetType
          - EcsHealthCheckPath

## ---------------------------------------------------------------------------------
Parameters:
  
  EcsVpc:
    Type: AWS::EC2::VPC::Id
    Default: MainVpc

  EcsSubnets:
    Type: List<AWS::EC2::Subnet::Id>

  EcsListenerPort:
    Type: Number
    Default: 8080

  EcsSourceIp1:
    Type: String
    Default: 0.0.0.0/0

  EcsSourceIp2:
    Type: String
    Default: 0.0.0.0/0

  EcsTargetPort:
    Type: Number
    Default: 8080

  EcsTargetType:
    Type: String
    Default: ip
    AllowedValues: [instance, ip]
    ConstraintDescription: must specify instance or ip

  EcsHealthCheckPath:
    Type: String
    Default: /

  Image:
    Type: String
    Default: docker.io/frankie116/lab045-docker-image

  ServiceName:
    Type: String
    Default: MyService

  ContainerPort:
    Type: Number
    Default: 8080

  HealthCheckGracePeriod:
    Type: Number
    Default: 420

  HostedZoneName:
    Type: String
    Default: company.com

  Subdomain:
    Type: String
    Default: myservice

  MinContainers:
    Type: Number
    Default: 2

  MaxContainers:
    Type: Number
    Default: 10

  AutoScalingTargetValue:
    Type: Number
    Default: 50

## ---------------------------------------------------------------------------------
Resources:

  NestedTargetGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        Vpc: !Ref EcsVpc
        Subnets: !Join [",", !Ref EcsSubnets]
        ListenerPort: !Ref EcsListenerPort
        SourceIp1: !Ref EcsSourceIp1
        SourceIp2: !Ref EcsSourceIp2
        TargetPort: !Ref EcsTargetPort
        TargetType: !Ref EcsTargetType
        HealthCheckPath: !Ref EcsHealthCheckPath
      TemplateURL: https://my-cloudformation-repo.s3.eu-west-2.amazonaws.com/nested-stacks/303-listeners.yaml

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['', [!Ref ServiceName, Cluster]]

  Service:
    Type: AWS::ECS::Service
    DependsOn: NestedTargetGroup
    Properties: 
      ServiceName: !Ref ServiceName
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriod
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets: !Ref EcsSubnets
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !GetAtt NestedTargetGroup.Outputs.TargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      # Name of the task definition. Subsequent versions of the task definition are grouped together under this name.
      Family: !Join ['', [!Ref ServiceName, TaskDefinition]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 0.5GB
      ExecutionRoleArn: !Ref ExecutionRole
      # "The Amazon Resource Name (ARN) of an AWS Identity and Access Management (IAM) role that grants containers in the task permission to call AWS APIs on your behalf."
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref Image
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          # Send logs to CloudWatch Logs
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: NestedTargetGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, ContainerSecurityGroup]]
      VpcId: !Ref EcsVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !GetAtt NestedTargetGroup.Outputs.SgAlb

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, ExecutionRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, TaskRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      # ManagedPolicyArns:
      #   -
      # Policies:
      #   -


  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceName, TaskDefinition]]

## ---------------------------------------------------------------------------------
# Will move dns to seperate nested stack

  DNSRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: NestedTargetGroup
    Properties:
      HostedZoneName: !Join ['', [!Ref HostedZoneName, .]]
      Name: !Join ['', [!Ref Subdomain, ., !Ref HostedZoneName, .]]
      Type: A
      AliasTarget:
        DNSName: 
          !GetAtt NestedTargetGroup.Outputs.AlbDnsName
        HostedZoneId: 
          !GetAtt NestedTargetGroup.Outputs.AlbZoneID
                           
## ---------------------------------------------------------------------------------
# Will move asg to seperate nested stack

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinContainers
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join ['/', [service, !Ref Cluster, !GetAtt Service.Name]]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Join ['', [!Ref ServiceName, AutoScalingPolicy]]
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 10
        ScaleOutCooldown: 10
        TargetValue: !Ref AutoScalingTargetValue

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref ServiceName, AutoScalingRole]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole'

## ---------------------------------------------------------------------------------
Outputs:
  Endpoint:
    Description: Endpoint
    Value: !Join ['', ['http://', !Ref DNSRecord, ':', !Ref ContainerPort]]